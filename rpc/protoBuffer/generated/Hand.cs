// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hand.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HandDetect {

  /// <summary>Holder for reflection information generated from hand.proto</summary>
  public static partial class HandReflection {

    #region Descriptor
    /// <summary>File descriptor for hand.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpoYW5kLnByb3RvEgpIYW5kRGV0ZWN0IikKBnBvaW50MxIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAiIeCgZwb2ludDISCQoBeBgBIAEoAhIJ",
            "CgF5GAIgASgCImwKEFByb3RvSGFuZFJlcXVlc3QSJAoFaGFuZHMYASADKAsy",
            "FS5IYW5kRGV0ZWN0LlByb3RvSGFuZBIyCgdjb21tYW5kGAIgASgLMiEuSGFu",
            "ZERldGVjdC5Qcm90bzNEQ29udHJvbENvbW1hbmQiIwoRUHJvdG9IYW5kUmVz",
            "cG9uc2USDgoGcmVzdWx0GAEgASgIIsYHCglQcm90b0hhbmQSDwoHaGFuZFVp",
            "ZBgYIAEoBRITCgtnZXN0dXJlVHlwZRgXIAEoBRIQCghoYW5kU2lkZRgWIAEo",
            "BRIhCgVXUklTVBgVIAEoCzISLkhhbmREZXRlY3QucG9pbnQzEiUKCVRIVU1C",
            "X0NNQxgBIAEoCzISLkhhbmREZXRlY3QucG9pbnQzEiUKCVRIVU1CX01DUBgC",
            "IAEoCzISLkhhbmREZXRlY3QucG9pbnQzEiUKCVRIVU1CX0RJUBgDIAEoCzIS",
            "LkhhbmREZXRlY3QucG9pbnQzEiUKCVRIVU1CX1RJUBgEIAEoCzISLkhhbmRE",
            "ZXRlY3QucG9pbnQzEiwKEElOREVYX0ZJTkdFUl9NQ1AYBSABKAsyEi5IYW5k",
            "RGV0ZWN0LnBvaW50MxIsChBJTkRFWF9GSU5HRVJfUElQGAYgASgLMhIuSGFu",
            "ZERldGVjdC5wb2ludDMSLAoQSU5ERVhfRklOR0VSX0RJUBgHIAEoCzISLkhh",
            "bmREZXRlY3QucG9pbnQzEiwKEElOREVYX0ZJTkdFUl9USVAYCCABKAsyEi5I",
            "YW5kRGV0ZWN0LnBvaW50MxItChFNSURETEVfRklOR0VSX01DUBgJIAEoCzIS",
            "LkhhbmREZXRlY3QucG9pbnQzEi0KEU1JRERMRV9GSU5HRVJfUElQGAogASgL",
            "MhIuSGFuZERldGVjdC5wb2ludDMSLQoRTUlERExFX0ZJTkdFUl9ESVAYCyAB",
            "KAsyEi5IYW5kRGV0ZWN0LnBvaW50MxItChFNSURETEVfRklOR0VSX1RJUBgM",
            "IAEoCzISLkhhbmREZXRlY3QucG9pbnQzEisKD1JJTkdfRklOR0VSX01DUBgN",
            "IAEoCzISLkhhbmREZXRlY3QucG9pbnQzEisKD1JJTkdfRklOR0VSX1BJUBgO",
            "IAEoCzISLkhhbmREZXRlY3QucG9pbnQzEisKD1JJTkdfRklOR0VSX0RJUBgP",
            "IAEoCzISLkhhbmREZXRlY3QucG9pbnQzEisKD1JJTkdfRklOR0VSX1RJUBgQ",
            "IAEoCzISLkhhbmREZXRlY3QucG9pbnQzEiUKCVBJTktZX01DUBgRIAEoCzIS",
            "LkhhbmREZXRlY3QucG9pbnQzEiUKCVBJTktZX1BJUBgSIAEoCzISLkhhbmRE",
            "ZXRlY3QucG9pbnQzEiUKCVBJTktZX0RJUBgTIAEoCzISLkhhbmREZXRlY3Qu",
            "cG9pbnQzEiUKCVBJTktZX1RJUBgUIAEoCzISLkhhbmREZXRlY3QucG9pbnQz",
            "IioKFVByb3RvM0RDb250cm9sQ29tbWFuZBIRCgljb21tYW5kSWQYASABKAUy",
            "WAoLSGFuZFNlcnZpY2USSQoIUHVzaEhhbmQSHC5IYW5kRGV0ZWN0LlByb3Rv",
            "SGFuZFJlcXVlc3QaHS5IYW5kRGV0ZWN0LlByb3RvSGFuZFJlc3BvbnNlIgBi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.point3), global::HandDetect.point3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.point2), global::HandDetect.point2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.ProtoHandRequest), global::HandDetect.ProtoHandRequest.Parser, new[]{ "Hands", "Command" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.ProtoHandResponse), global::HandDetect.ProtoHandResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.ProtoHand), global::HandDetect.ProtoHand.Parser, new[]{ "HandUid", "GestureType", "HandSide", "WRIST", "THUMBCMC", "THUMBMCP", "THUMBDIP", "THUMBTIP", "INDEXFINGERMCP", "INDEXFINGERPIP", "INDEXFINGERDIP", "INDEXFINGERTIP", "MIDDLEFINGERMCP", "MIDDLEFINGERPIP", "MIDDLEFINGERDIP", "MIDDLEFINGERTIP", "RINGFINGERMCP", "RINGFINGERPIP", "RINGFINGERDIP", "RINGFINGERTIP", "PINKYMCP", "PINKYPIP", "PINKYDIP", "PINKYTIP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.Proto3DControlCommand), global::HandDetect.Proto3DControlCommand.Parser, new[]{ "CommandId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class point3 : pb::IMessage<point3> {
    private static readonly pb::MessageParser<point3> _parser = new pb::MessageParser<point3>(() => new point3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<point3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point3(point3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point3 Clone() {
      return new point3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as point3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(point3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(point3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class point2 : pb::IMessage<point2> {
    private static readonly pb::MessageParser<point2> _parser = new pb::MessageParser<point2>(() => new point2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<point2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point2(point2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point2 Clone() {
      return new point2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as point2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(point2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(point2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoHandRequest : pb::IMessage<ProtoHandRequest> {
    private static readonly pb::MessageParser<ProtoHandRequest> _parser = new pb::MessageParser<ProtoHandRequest>(() => new ProtoHandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandRequest(ProtoHandRequest other) : this() {
      hands_ = other.hands_.Clone();
      command_ = other.command_ != null ? other.command_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandRequest Clone() {
      return new ProtoHandRequest(this);
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HandDetect.ProtoHand> _repeated_hands_codec
        = pb::FieldCodec.ForMessage(10, global::HandDetect.ProtoHand.Parser);
    private readonly pbc::RepeatedField<global::HandDetect.ProtoHand> hands_ = new pbc::RepeatedField<global::HandDetect.ProtoHand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HandDetect.ProtoHand> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::HandDetect.Proto3DControlCommand command_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.Proto3DControlCommand Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hands_.Equals(other.hands_)) return false;
      if (!object.Equals(Command, other.Command)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hands_.GetHashCode();
      if (command_ != null) hash ^= Command.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hands_.WriteTo(output, _repeated_hands_codec);
      if (command_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Command);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hands_.CalculateSize(_repeated_hands_codec);
      if (command_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHandRequest other) {
      if (other == null) {
        return;
      }
      hands_.Add(other.hands_);
      if (other.command_ != null) {
        if (command_ == null) {
          Command = new global::HandDetect.Proto3DControlCommand();
        }
        Command.MergeFrom(other.Command);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 18: {
            if (command_ == null) {
              Command = new global::HandDetect.Proto3DControlCommand();
            }
            input.ReadMessage(Command);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoHandResponse : pb::IMessage<ProtoHandResponse> {
    private static readonly pb::MessageParser<ProtoHandResponse> _parser = new pb::MessageParser<ProtoHandResponse>(() => new ProtoHandResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHandResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandResponse(ProtoHandResponse other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandResponse Clone() {
      return new ProtoHandResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHandResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHandResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHandResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoHand : pb::IMessage<ProtoHand> {
    private static readonly pb::MessageParser<ProtoHand> _parser = new pb::MessageParser<ProtoHand>(() => new ProtoHand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHand(ProtoHand other) : this() {
      handUid_ = other.handUid_;
      gestureType_ = other.gestureType_;
      handSide_ = other.handSide_;
      wRIST_ = other.wRIST_ != null ? other.wRIST_.Clone() : null;
      tHUMBCMC_ = other.tHUMBCMC_ != null ? other.tHUMBCMC_.Clone() : null;
      tHUMBMCP_ = other.tHUMBMCP_ != null ? other.tHUMBMCP_.Clone() : null;
      tHUMBDIP_ = other.tHUMBDIP_ != null ? other.tHUMBDIP_.Clone() : null;
      tHUMBTIP_ = other.tHUMBTIP_ != null ? other.tHUMBTIP_.Clone() : null;
      iNDEXFINGERMCP_ = other.iNDEXFINGERMCP_ != null ? other.iNDEXFINGERMCP_.Clone() : null;
      iNDEXFINGERPIP_ = other.iNDEXFINGERPIP_ != null ? other.iNDEXFINGERPIP_.Clone() : null;
      iNDEXFINGERDIP_ = other.iNDEXFINGERDIP_ != null ? other.iNDEXFINGERDIP_.Clone() : null;
      iNDEXFINGERTIP_ = other.iNDEXFINGERTIP_ != null ? other.iNDEXFINGERTIP_.Clone() : null;
      mIDDLEFINGERMCP_ = other.mIDDLEFINGERMCP_ != null ? other.mIDDLEFINGERMCP_.Clone() : null;
      mIDDLEFINGERPIP_ = other.mIDDLEFINGERPIP_ != null ? other.mIDDLEFINGERPIP_.Clone() : null;
      mIDDLEFINGERDIP_ = other.mIDDLEFINGERDIP_ != null ? other.mIDDLEFINGERDIP_.Clone() : null;
      mIDDLEFINGERTIP_ = other.mIDDLEFINGERTIP_ != null ? other.mIDDLEFINGERTIP_.Clone() : null;
      rINGFINGERMCP_ = other.rINGFINGERMCP_ != null ? other.rINGFINGERMCP_.Clone() : null;
      rINGFINGERPIP_ = other.rINGFINGERPIP_ != null ? other.rINGFINGERPIP_.Clone() : null;
      rINGFINGERDIP_ = other.rINGFINGERDIP_ != null ? other.rINGFINGERDIP_.Clone() : null;
      rINGFINGERTIP_ = other.rINGFINGERTIP_ != null ? other.rINGFINGERTIP_.Clone() : null;
      pINKYMCP_ = other.pINKYMCP_ != null ? other.pINKYMCP_.Clone() : null;
      pINKYPIP_ = other.pINKYPIP_ != null ? other.pINKYPIP_.Clone() : null;
      pINKYDIP_ = other.pINKYDIP_ != null ? other.pINKYDIP_.Clone() : null;
      pINKYTIP_ = other.pINKYTIP_ != null ? other.pINKYTIP_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHand Clone() {
      return new ProtoHand(this);
    }

    /// <summary>Field number for the "handUid" field.</summary>
    public const int HandUidFieldNumber = 24;
    private int handUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandUid {
      get { return handUid_; }
      set {
        handUid_ = value;
      }
    }

    /// <summary>Field number for the "gestureType" field.</summary>
    public const int GestureTypeFieldNumber = 23;
    private int gestureType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GestureType {
      get { return gestureType_; }
      set {
        gestureType_ = value;
      }
    }

    /// <summary>Field number for the "handSide" field.</summary>
    public const int HandSideFieldNumber = 22;
    private int handSide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandSide {
      get { return handSide_; }
      set {
        handSide_ = value;
      }
    }

    /// <summary>Field number for the "WRIST" field.</summary>
    public const int WRISTFieldNumber = 21;
    private global::HandDetect.point3 wRIST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 WRIST {
      get { return wRIST_; }
      set {
        wRIST_ = value;
      }
    }

    /// <summary>Field number for the "THUMB_CMC" field.</summary>
    public const int THUMBCMCFieldNumber = 1;
    private global::HandDetect.point3 tHUMBCMC_;
    /// <summary>
    /// 拇指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 THUMBCMC {
      get { return tHUMBCMC_; }
      set {
        tHUMBCMC_ = value;
      }
    }

    /// <summary>Field number for the "THUMB_MCP" field.</summary>
    public const int THUMBMCPFieldNumber = 2;
    private global::HandDetect.point3 tHUMBMCP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 THUMBMCP {
      get { return tHUMBMCP_; }
      set {
        tHUMBMCP_ = value;
      }
    }

    /// <summary>Field number for the "THUMB_DIP" field.</summary>
    public const int THUMBDIPFieldNumber = 3;
    private global::HandDetect.point3 tHUMBDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 THUMBDIP {
      get { return tHUMBDIP_; }
      set {
        tHUMBDIP_ = value;
      }
    }

    /// <summary>Field number for the "THUMB_TIP" field.</summary>
    public const int THUMBTIPFieldNumber = 4;
    private global::HandDetect.point3 tHUMBTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 THUMBTIP {
      get { return tHUMBTIP_; }
      set {
        tHUMBTIP_ = value;
      }
    }

    /// <summary>Field number for the "INDEX_FINGER_MCP" field.</summary>
    public const int INDEXFINGERMCPFieldNumber = 5;
    private global::HandDetect.point3 iNDEXFINGERMCP_;
    /// <summary>
    /// 食指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 INDEXFINGERMCP {
      get { return iNDEXFINGERMCP_; }
      set {
        iNDEXFINGERMCP_ = value;
      }
    }

    /// <summary>Field number for the "INDEX_FINGER_PIP" field.</summary>
    public const int INDEXFINGERPIPFieldNumber = 6;
    private global::HandDetect.point3 iNDEXFINGERPIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 INDEXFINGERPIP {
      get { return iNDEXFINGERPIP_; }
      set {
        iNDEXFINGERPIP_ = value;
      }
    }

    /// <summary>Field number for the "INDEX_FINGER_DIP" field.</summary>
    public const int INDEXFINGERDIPFieldNumber = 7;
    private global::HandDetect.point3 iNDEXFINGERDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 INDEXFINGERDIP {
      get { return iNDEXFINGERDIP_; }
      set {
        iNDEXFINGERDIP_ = value;
      }
    }

    /// <summary>Field number for the "INDEX_FINGER_TIP" field.</summary>
    public const int INDEXFINGERTIPFieldNumber = 8;
    private global::HandDetect.point3 iNDEXFINGERTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 INDEXFINGERTIP {
      get { return iNDEXFINGERTIP_; }
      set {
        iNDEXFINGERTIP_ = value;
      }
    }

    /// <summary>Field number for the "MIDDLE_FINGER_MCP" field.</summary>
    public const int MIDDLEFINGERMCPFieldNumber = 9;
    private global::HandDetect.point3 mIDDLEFINGERMCP_;
    /// <summary>
    /// 中指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MIDDLEFINGERMCP {
      get { return mIDDLEFINGERMCP_; }
      set {
        mIDDLEFINGERMCP_ = value;
      }
    }

    /// <summary>Field number for the "MIDDLE_FINGER_PIP" field.</summary>
    public const int MIDDLEFINGERPIPFieldNumber = 10;
    private global::HandDetect.point3 mIDDLEFINGERPIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MIDDLEFINGERPIP {
      get { return mIDDLEFINGERPIP_; }
      set {
        mIDDLEFINGERPIP_ = value;
      }
    }

    /// <summary>Field number for the "MIDDLE_FINGER_DIP" field.</summary>
    public const int MIDDLEFINGERDIPFieldNumber = 11;
    private global::HandDetect.point3 mIDDLEFINGERDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MIDDLEFINGERDIP {
      get { return mIDDLEFINGERDIP_; }
      set {
        mIDDLEFINGERDIP_ = value;
      }
    }

    /// <summary>Field number for the "MIDDLE_FINGER_TIP" field.</summary>
    public const int MIDDLEFINGERTIPFieldNumber = 12;
    private global::HandDetect.point3 mIDDLEFINGERTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MIDDLEFINGERTIP {
      get { return mIDDLEFINGERTIP_; }
      set {
        mIDDLEFINGERTIP_ = value;
      }
    }

    /// <summary>Field number for the "RING_FINGER_MCP" field.</summary>
    public const int RINGFINGERMCPFieldNumber = 13;
    private global::HandDetect.point3 rINGFINGERMCP_;
    /// <summary>
    /// 无名指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RINGFINGERMCP {
      get { return rINGFINGERMCP_; }
      set {
        rINGFINGERMCP_ = value;
      }
    }

    /// <summary>Field number for the "RING_FINGER_PIP" field.</summary>
    public const int RINGFINGERPIPFieldNumber = 14;
    private global::HandDetect.point3 rINGFINGERPIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RINGFINGERPIP {
      get { return rINGFINGERPIP_; }
      set {
        rINGFINGERPIP_ = value;
      }
    }

    /// <summary>Field number for the "RING_FINGER_DIP" field.</summary>
    public const int RINGFINGERDIPFieldNumber = 15;
    private global::HandDetect.point3 rINGFINGERDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RINGFINGERDIP {
      get { return rINGFINGERDIP_; }
      set {
        rINGFINGERDIP_ = value;
      }
    }

    /// <summary>Field number for the "RING_FINGER_TIP" field.</summary>
    public const int RINGFINGERTIPFieldNumber = 16;
    private global::HandDetect.point3 rINGFINGERTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RINGFINGERTIP {
      get { return rINGFINGERTIP_; }
      set {
        rINGFINGERTIP_ = value;
      }
    }

    /// <summary>Field number for the "PINKY_MCP" field.</summary>
    public const int PINKYMCPFieldNumber = 17;
    private global::HandDetect.point3 pINKYMCP_;
    /// <summary>
    /// 小拇指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PINKYMCP {
      get { return pINKYMCP_; }
      set {
        pINKYMCP_ = value;
      }
    }

    /// <summary>Field number for the "PINKY_PIP" field.</summary>
    public const int PINKYPIPFieldNumber = 18;
    private global::HandDetect.point3 pINKYPIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PINKYPIP {
      get { return pINKYPIP_; }
      set {
        pINKYPIP_ = value;
      }
    }

    /// <summary>Field number for the "PINKY_DIP" field.</summary>
    public const int PINKYDIPFieldNumber = 19;
    private global::HandDetect.point3 pINKYDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PINKYDIP {
      get { return pINKYDIP_; }
      set {
        pINKYDIP_ = value;
      }
    }

    /// <summary>Field number for the "PINKY_TIP" field.</summary>
    public const int PINKYTIPFieldNumber = 20;
    private global::HandDetect.point3 pINKYTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PINKYTIP {
      get { return pINKYTIP_; }
      set {
        pINKYTIP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandUid != other.HandUid) return false;
      if (GestureType != other.GestureType) return false;
      if (HandSide != other.HandSide) return false;
      if (!object.Equals(WRIST, other.WRIST)) return false;
      if (!object.Equals(THUMBCMC, other.THUMBCMC)) return false;
      if (!object.Equals(THUMBMCP, other.THUMBMCP)) return false;
      if (!object.Equals(THUMBDIP, other.THUMBDIP)) return false;
      if (!object.Equals(THUMBTIP, other.THUMBTIP)) return false;
      if (!object.Equals(INDEXFINGERMCP, other.INDEXFINGERMCP)) return false;
      if (!object.Equals(INDEXFINGERPIP, other.INDEXFINGERPIP)) return false;
      if (!object.Equals(INDEXFINGERDIP, other.INDEXFINGERDIP)) return false;
      if (!object.Equals(INDEXFINGERTIP, other.INDEXFINGERTIP)) return false;
      if (!object.Equals(MIDDLEFINGERMCP, other.MIDDLEFINGERMCP)) return false;
      if (!object.Equals(MIDDLEFINGERPIP, other.MIDDLEFINGERPIP)) return false;
      if (!object.Equals(MIDDLEFINGERDIP, other.MIDDLEFINGERDIP)) return false;
      if (!object.Equals(MIDDLEFINGERTIP, other.MIDDLEFINGERTIP)) return false;
      if (!object.Equals(RINGFINGERMCP, other.RINGFINGERMCP)) return false;
      if (!object.Equals(RINGFINGERPIP, other.RINGFINGERPIP)) return false;
      if (!object.Equals(RINGFINGERDIP, other.RINGFINGERDIP)) return false;
      if (!object.Equals(RINGFINGERTIP, other.RINGFINGERTIP)) return false;
      if (!object.Equals(PINKYMCP, other.PINKYMCP)) return false;
      if (!object.Equals(PINKYPIP, other.PINKYPIP)) return false;
      if (!object.Equals(PINKYDIP, other.PINKYDIP)) return false;
      if (!object.Equals(PINKYTIP, other.PINKYTIP)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HandUid != 0) hash ^= HandUid.GetHashCode();
      if (GestureType != 0) hash ^= GestureType.GetHashCode();
      if (HandSide != 0) hash ^= HandSide.GetHashCode();
      if (wRIST_ != null) hash ^= WRIST.GetHashCode();
      if (tHUMBCMC_ != null) hash ^= THUMBCMC.GetHashCode();
      if (tHUMBMCP_ != null) hash ^= THUMBMCP.GetHashCode();
      if (tHUMBDIP_ != null) hash ^= THUMBDIP.GetHashCode();
      if (tHUMBTIP_ != null) hash ^= THUMBTIP.GetHashCode();
      if (iNDEXFINGERMCP_ != null) hash ^= INDEXFINGERMCP.GetHashCode();
      if (iNDEXFINGERPIP_ != null) hash ^= INDEXFINGERPIP.GetHashCode();
      if (iNDEXFINGERDIP_ != null) hash ^= INDEXFINGERDIP.GetHashCode();
      if (iNDEXFINGERTIP_ != null) hash ^= INDEXFINGERTIP.GetHashCode();
      if (mIDDLEFINGERMCP_ != null) hash ^= MIDDLEFINGERMCP.GetHashCode();
      if (mIDDLEFINGERPIP_ != null) hash ^= MIDDLEFINGERPIP.GetHashCode();
      if (mIDDLEFINGERDIP_ != null) hash ^= MIDDLEFINGERDIP.GetHashCode();
      if (mIDDLEFINGERTIP_ != null) hash ^= MIDDLEFINGERTIP.GetHashCode();
      if (rINGFINGERMCP_ != null) hash ^= RINGFINGERMCP.GetHashCode();
      if (rINGFINGERPIP_ != null) hash ^= RINGFINGERPIP.GetHashCode();
      if (rINGFINGERDIP_ != null) hash ^= RINGFINGERDIP.GetHashCode();
      if (rINGFINGERTIP_ != null) hash ^= RINGFINGERTIP.GetHashCode();
      if (pINKYMCP_ != null) hash ^= PINKYMCP.GetHashCode();
      if (pINKYPIP_ != null) hash ^= PINKYPIP.GetHashCode();
      if (pINKYDIP_ != null) hash ^= PINKYDIP.GetHashCode();
      if (pINKYTIP_ != null) hash ^= PINKYTIP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tHUMBCMC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(THUMBCMC);
      }
      if (tHUMBMCP_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(THUMBMCP);
      }
      if (tHUMBDIP_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(THUMBDIP);
      }
      if (tHUMBTIP_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(THUMBTIP);
      }
      if (iNDEXFINGERMCP_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(INDEXFINGERMCP);
      }
      if (iNDEXFINGERPIP_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(INDEXFINGERPIP);
      }
      if (iNDEXFINGERDIP_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(INDEXFINGERDIP);
      }
      if (iNDEXFINGERTIP_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(INDEXFINGERTIP);
      }
      if (mIDDLEFINGERMCP_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MIDDLEFINGERMCP);
      }
      if (mIDDLEFINGERPIP_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MIDDLEFINGERPIP);
      }
      if (mIDDLEFINGERDIP_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(MIDDLEFINGERDIP);
      }
      if (mIDDLEFINGERTIP_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(MIDDLEFINGERTIP);
      }
      if (rINGFINGERMCP_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RINGFINGERMCP);
      }
      if (rINGFINGERPIP_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(RINGFINGERPIP);
      }
      if (rINGFINGERDIP_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RINGFINGERDIP);
      }
      if (rINGFINGERTIP_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RINGFINGERTIP);
      }
      if (pINKYMCP_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PINKYMCP);
      }
      if (pINKYPIP_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PINKYPIP);
      }
      if (pINKYDIP_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PINKYDIP);
      }
      if (pINKYTIP_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PINKYTIP);
      }
      if (wRIST_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(WRIST);
      }
      if (HandSide != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(HandSide);
      }
      if (GestureType != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(GestureType);
      }
      if (HandUid != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(HandUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HandUid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandUid);
      }
      if (GestureType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GestureType);
      }
      if (HandSide != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandSide);
      }
      if (wRIST_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WRIST);
      }
      if (tHUMBCMC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(THUMBCMC);
      }
      if (tHUMBMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(THUMBMCP);
      }
      if (tHUMBDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(THUMBDIP);
      }
      if (tHUMBTIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(THUMBTIP);
      }
      if (iNDEXFINGERMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(INDEXFINGERMCP);
      }
      if (iNDEXFINGERPIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(INDEXFINGERPIP);
      }
      if (iNDEXFINGERDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(INDEXFINGERDIP);
      }
      if (iNDEXFINGERTIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(INDEXFINGERTIP);
      }
      if (mIDDLEFINGERMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MIDDLEFINGERMCP);
      }
      if (mIDDLEFINGERPIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MIDDLEFINGERPIP);
      }
      if (mIDDLEFINGERDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MIDDLEFINGERDIP);
      }
      if (mIDDLEFINGERTIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MIDDLEFINGERTIP);
      }
      if (rINGFINGERMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RINGFINGERMCP);
      }
      if (rINGFINGERPIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RINGFINGERPIP);
      }
      if (rINGFINGERDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RINGFINGERDIP);
      }
      if (rINGFINGERTIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RINGFINGERTIP);
      }
      if (pINKYMCP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PINKYMCP);
      }
      if (pINKYPIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PINKYPIP);
      }
      if (pINKYDIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PINKYDIP);
      }
      if (pINKYTIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PINKYTIP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHand other) {
      if (other == null) {
        return;
      }
      if (other.HandUid != 0) {
        HandUid = other.HandUid;
      }
      if (other.GestureType != 0) {
        GestureType = other.GestureType;
      }
      if (other.HandSide != 0) {
        HandSide = other.HandSide;
      }
      if (other.wRIST_ != null) {
        if (wRIST_ == null) {
          WRIST = new global::HandDetect.point3();
        }
        WRIST.MergeFrom(other.WRIST);
      }
      if (other.tHUMBCMC_ != null) {
        if (tHUMBCMC_ == null) {
          THUMBCMC = new global::HandDetect.point3();
        }
        THUMBCMC.MergeFrom(other.THUMBCMC);
      }
      if (other.tHUMBMCP_ != null) {
        if (tHUMBMCP_ == null) {
          THUMBMCP = new global::HandDetect.point3();
        }
        THUMBMCP.MergeFrom(other.THUMBMCP);
      }
      if (other.tHUMBDIP_ != null) {
        if (tHUMBDIP_ == null) {
          THUMBDIP = new global::HandDetect.point3();
        }
        THUMBDIP.MergeFrom(other.THUMBDIP);
      }
      if (other.tHUMBTIP_ != null) {
        if (tHUMBTIP_ == null) {
          THUMBTIP = new global::HandDetect.point3();
        }
        THUMBTIP.MergeFrom(other.THUMBTIP);
      }
      if (other.iNDEXFINGERMCP_ != null) {
        if (iNDEXFINGERMCP_ == null) {
          INDEXFINGERMCP = new global::HandDetect.point3();
        }
        INDEXFINGERMCP.MergeFrom(other.INDEXFINGERMCP);
      }
      if (other.iNDEXFINGERPIP_ != null) {
        if (iNDEXFINGERPIP_ == null) {
          INDEXFINGERPIP = new global::HandDetect.point3();
        }
        INDEXFINGERPIP.MergeFrom(other.INDEXFINGERPIP);
      }
      if (other.iNDEXFINGERDIP_ != null) {
        if (iNDEXFINGERDIP_ == null) {
          INDEXFINGERDIP = new global::HandDetect.point3();
        }
        INDEXFINGERDIP.MergeFrom(other.INDEXFINGERDIP);
      }
      if (other.iNDEXFINGERTIP_ != null) {
        if (iNDEXFINGERTIP_ == null) {
          INDEXFINGERTIP = new global::HandDetect.point3();
        }
        INDEXFINGERTIP.MergeFrom(other.INDEXFINGERTIP);
      }
      if (other.mIDDLEFINGERMCP_ != null) {
        if (mIDDLEFINGERMCP_ == null) {
          MIDDLEFINGERMCP = new global::HandDetect.point3();
        }
        MIDDLEFINGERMCP.MergeFrom(other.MIDDLEFINGERMCP);
      }
      if (other.mIDDLEFINGERPIP_ != null) {
        if (mIDDLEFINGERPIP_ == null) {
          MIDDLEFINGERPIP = new global::HandDetect.point3();
        }
        MIDDLEFINGERPIP.MergeFrom(other.MIDDLEFINGERPIP);
      }
      if (other.mIDDLEFINGERDIP_ != null) {
        if (mIDDLEFINGERDIP_ == null) {
          MIDDLEFINGERDIP = new global::HandDetect.point3();
        }
        MIDDLEFINGERDIP.MergeFrom(other.MIDDLEFINGERDIP);
      }
      if (other.mIDDLEFINGERTIP_ != null) {
        if (mIDDLEFINGERTIP_ == null) {
          MIDDLEFINGERTIP = new global::HandDetect.point3();
        }
        MIDDLEFINGERTIP.MergeFrom(other.MIDDLEFINGERTIP);
      }
      if (other.rINGFINGERMCP_ != null) {
        if (rINGFINGERMCP_ == null) {
          RINGFINGERMCP = new global::HandDetect.point3();
        }
        RINGFINGERMCP.MergeFrom(other.RINGFINGERMCP);
      }
      if (other.rINGFINGERPIP_ != null) {
        if (rINGFINGERPIP_ == null) {
          RINGFINGERPIP = new global::HandDetect.point3();
        }
        RINGFINGERPIP.MergeFrom(other.RINGFINGERPIP);
      }
      if (other.rINGFINGERDIP_ != null) {
        if (rINGFINGERDIP_ == null) {
          RINGFINGERDIP = new global::HandDetect.point3();
        }
        RINGFINGERDIP.MergeFrom(other.RINGFINGERDIP);
      }
      if (other.rINGFINGERTIP_ != null) {
        if (rINGFINGERTIP_ == null) {
          RINGFINGERTIP = new global::HandDetect.point3();
        }
        RINGFINGERTIP.MergeFrom(other.RINGFINGERTIP);
      }
      if (other.pINKYMCP_ != null) {
        if (pINKYMCP_ == null) {
          PINKYMCP = new global::HandDetect.point3();
        }
        PINKYMCP.MergeFrom(other.PINKYMCP);
      }
      if (other.pINKYPIP_ != null) {
        if (pINKYPIP_ == null) {
          PINKYPIP = new global::HandDetect.point3();
        }
        PINKYPIP.MergeFrom(other.PINKYPIP);
      }
      if (other.pINKYDIP_ != null) {
        if (pINKYDIP_ == null) {
          PINKYDIP = new global::HandDetect.point3();
        }
        PINKYDIP.MergeFrom(other.PINKYDIP);
      }
      if (other.pINKYTIP_ != null) {
        if (pINKYTIP_ == null) {
          PINKYTIP = new global::HandDetect.point3();
        }
        PINKYTIP.MergeFrom(other.PINKYTIP);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tHUMBCMC_ == null) {
              THUMBCMC = new global::HandDetect.point3();
            }
            input.ReadMessage(THUMBCMC);
            break;
          }
          case 18: {
            if (tHUMBMCP_ == null) {
              THUMBMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(THUMBMCP);
            break;
          }
          case 26: {
            if (tHUMBDIP_ == null) {
              THUMBDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(THUMBDIP);
            break;
          }
          case 34: {
            if (tHUMBTIP_ == null) {
              THUMBTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(THUMBTIP);
            break;
          }
          case 42: {
            if (iNDEXFINGERMCP_ == null) {
              INDEXFINGERMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(INDEXFINGERMCP);
            break;
          }
          case 50: {
            if (iNDEXFINGERPIP_ == null) {
              INDEXFINGERPIP = new global::HandDetect.point3();
            }
            input.ReadMessage(INDEXFINGERPIP);
            break;
          }
          case 58: {
            if (iNDEXFINGERDIP_ == null) {
              INDEXFINGERDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(INDEXFINGERDIP);
            break;
          }
          case 66: {
            if (iNDEXFINGERTIP_ == null) {
              INDEXFINGERTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(INDEXFINGERTIP);
            break;
          }
          case 74: {
            if (mIDDLEFINGERMCP_ == null) {
              MIDDLEFINGERMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(MIDDLEFINGERMCP);
            break;
          }
          case 82: {
            if (mIDDLEFINGERPIP_ == null) {
              MIDDLEFINGERPIP = new global::HandDetect.point3();
            }
            input.ReadMessage(MIDDLEFINGERPIP);
            break;
          }
          case 90: {
            if (mIDDLEFINGERDIP_ == null) {
              MIDDLEFINGERDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(MIDDLEFINGERDIP);
            break;
          }
          case 98: {
            if (mIDDLEFINGERTIP_ == null) {
              MIDDLEFINGERTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(MIDDLEFINGERTIP);
            break;
          }
          case 106: {
            if (rINGFINGERMCP_ == null) {
              RINGFINGERMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(RINGFINGERMCP);
            break;
          }
          case 114: {
            if (rINGFINGERPIP_ == null) {
              RINGFINGERPIP = new global::HandDetect.point3();
            }
            input.ReadMessage(RINGFINGERPIP);
            break;
          }
          case 122: {
            if (rINGFINGERDIP_ == null) {
              RINGFINGERDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(RINGFINGERDIP);
            break;
          }
          case 130: {
            if (rINGFINGERTIP_ == null) {
              RINGFINGERTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(RINGFINGERTIP);
            break;
          }
          case 138: {
            if (pINKYMCP_ == null) {
              PINKYMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(PINKYMCP);
            break;
          }
          case 146: {
            if (pINKYPIP_ == null) {
              PINKYPIP = new global::HandDetect.point3();
            }
            input.ReadMessage(PINKYPIP);
            break;
          }
          case 154: {
            if (pINKYDIP_ == null) {
              PINKYDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(PINKYDIP);
            break;
          }
          case 162: {
            if (pINKYTIP_ == null) {
              PINKYTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(PINKYTIP);
            break;
          }
          case 170: {
            if (wRIST_ == null) {
              WRIST = new global::HandDetect.point3();
            }
            input.ReadMessage(WRIST);
            break;
          }
          case 176: {
            HandSide = input.ReadInt32();
            break;
          }
          case 184: {
            GestureType = input.ReadInt32();
            break;
          }
          case 192: {
            HandUid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Proto3DControlCommand : pb::IMessage<Proto3DControlCommand> {
    private static readonly pb::MessageParser<Proto3DControlCommand> _parser = new pb::MessageParser<Proto3DControlCommand>(() => new Proto3DControlCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Proto3DControlCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proto3DControlCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proto3DControlCommand(Proto3DControlCommand other) : this() {
      commandId_ = other.commandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proto3DControlCommand Clone() {
      return new Proto3DControlCommand(this);
    }

    /// <summary>Field number for the "commandId" field.</summary>
    public const int CommandIdFieldNumber = 1;
    private int commandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommandId {
      get { return commandId_; }
      set {
        commandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Proto3DControlCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Proto3DControlCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommandId != other.CommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommandId != 0) hash ^= CommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommandId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Proto3DControlCommand other) {
      if (other == null) {
        return;
      }
      if (other.CommandId != 0) {
        CommandId = other.CommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CommandId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
