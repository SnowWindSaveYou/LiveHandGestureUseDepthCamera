// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hand.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HandDetect {

  /// <summary>Holder for reflection information generated from hand.proto</summary>
  public static partial class HandReflection {

    #region Descriptor
    /// <summary>File descriptor for hand.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpoYW5kLnByb3RvEgpIYW5kRGV0ZWN0IikKBnBvaW50MxIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAiIeCgZwb2ludDISCQoBeBgBIAEoAhIJ",
            "CgF5GAIgASgCImwKEFByb3RvSGFuZFJlcXVlc3QSJAoFaGFuZHMYASADKAsy",
            "FS5IYW5kRGV0ZWN0LlByb3RvSGFuZBIyCgdjb21tYW5kGAIgASgLMiEuSGFu",
            "ZERldGVjdC5Qcm90bzNEQ29udHJvbENvbW1hbmQiIwoRUHJvdG9IYW5kUmVz",
            "cG9uc2USDgoGcmVzdWx0GAEgASgIIt4GCglQcm90b0hhbmQSDwoHaGFuZFVp",
            "ZBgYIAEoBRITCgtnZXN0dXJlVHlwZRgXIAEoBRIQCghoYW5kU2lkZRgWIAEo",
            "BRIhCgVXcmlzdBgVIAEoCzISLkhhbmREZXRlY3QucG9pbnQzEiQKCFRodW1i",
            "Q01DGAEgASgLMhIuSGFuZERldGVjdC5wb2ludDMSJAoIVGh1bWJNQ1AYAiAB",
            "KAsyEi5IYW5kRGV0ZWN0LnBvaW50MxIkCghUaHVtYkRJUBgDIAEoCzISLkhh",
            "bmREZXRlY3QucG9pbnQzEiQKCFRodW1iVElQGAQgASgLMhIuSGFuZERldGVj",
            "dC5wb2ludDMSJAoISW5kZXhNQ1AYBSABKAsyEi5IYW5kRGV0ZWN0LnBvaW50",
            "MxIkCghJbmRleFBJUBgGIAEoCzISLkhhbmREZXRlY3QucG9pbnQzEiQKCElu",
            "ZGV4RElQGAcgASgLMhIuSGFuZERldGVjdC5wb2ludDMSJAoISW5kZXhUSVAY",
            "CCABKAsyEi5IYW5kRGV0ZWN0LnBvaW50MxIlCglNaWRkbGVNQ1AYCSABKAsy",
            "Ei5IYW5kRGV0ZWN0LnBvaW50MxIlCglNaWRkbGVQSVAYCiABKAsyEi5IYW5k",
            "RGV0ZWN0LnBvaW50MxIlCglNaWRkbGVESVAYCyABKAsyEi5IYW5kRGV0ZWN0",
            "LnBvaW50MxIlCglNaWRkbGVUSVAYDCABKAsyEi5IYW5kRGV0ZWN0LnBvaW50",
            "MxIjCgdSaW5nTUNQGA0gASgLMhIuSGFuZERldGVjdC5wb2ludDMSIwoHUmlu",
            "Z1BJUBgOIAEoCzISLkhhbmREZXRlY3QucG9pbnQzEiMKB1JpbmdESVAYDyAB",
            "KAsyEi5IYW5kRGV0ZWN0LnBvaW50MxIjCgdSaW5nVElQGBAgASgLMhIuSGFu",
            "ZERldGVjdC5wb2ludDMSJAoIUGlua3lNQ1AYESABKAsyEi5IYW5kRGV0ZWN0",
            "LnBvaW50MxIkCghQaW5reVBJUBgSIAEoCzISLkhhbmREZXRlY3QucG9pbnQz",
            "EiQKCFBpbmt5RElQGBMgASgLMhIuSGFuZERldGVjdC5wb2ludDMSJAoIUGlu",
            "a3lUSVAYFCABKAsyEi5IYW5kRGV0ZWN0LnBvaW50MyIqChVQcm90bzNEQ29u",
            "dHJvbENvbW1hbmQSEQoJY29tbWFuZElkGAEgASgFMo0BCgtIYW5kU2Vydmlj",
            "ZRJJCghQdXNoSGFuZBIcLkhhbmREZXRlY3QuUHJvdG9IYW5kUmVxdWVzdBod",
            "LkhhbmREZXRlY3QuUHJvdG9IYW5kUmVzcG9uc2UiABIzCgdEb0dyZWF0EhIu",
            "SGFuZERldGVjdC5wb2ludDMaEi5IYW5kRGV0ZWN0LnBvaW50MyIAYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.point3), global::HandDetect.point3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.point2), global::HandDetect.point2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.ProtoHandRequest), global::HandDetect.ProtoHandRequest.Parser, new[]{ "Hands", "Command" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.ProtoHandResponse), global::HandDetect.ProtoHandResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.ProtoHand), global::HandDetect.ProtoHand.Parser, new[]{ "HandUid", "GestureType", "HandSide", "Wrist", "ThumbCMC", "ThumbMCP", "ThumbDIP", "ThumbTIP", "IndexMCP", "IndexPIP", "IndexDIP", "IndexTIP", "MiddleMCP", "MiddlePIP", "MiddleDIP", "MiddleTIP", "RingMCP", "RingPIP", "RingDIP", "RingTIP", "PinkyMCP", "PinkyPIP", "PinkyDIP", "PinkyTIP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HandDetect.Proto3DControlCommand), global::HandDetect.Proto3DControlCommand.Parser, new[]{ "CommandId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class point3 : pb::IMessage<point3> {
    private static readonly pb::MessageParser<point3> _parser = new pb::MessageParser<point3>(() => new point3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<point3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point3(point3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point3 Clone() {
      return new point3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as point3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(point3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(point3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class point2 : pb::IMessage<point2> {
    private static readonly pb::MessageParser<point2> _parser = new pb::MessageParser<point2>(() => new point2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<point2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point2(point2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public point2 Clone() {
      return new point2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as point2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(point2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(point2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoHandRequest : pb::IMessage<ProtoHandRequest> {
    private static readonly pb::MessageParser<ProtoHandRequest> _parser = new pb::MessageParser<ProtoHandRequest>(() => new ProtoHandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandRequest(ProtoHandRequest other) : this() {
      hands_ = other.hands_.Clone();
      command_ = other.command_ != null ? other.command_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandRequest Clone() {
      return new ProtoHandRequest(this);
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HandDetect.ProtoHand> _repeated_hands_codec
        = pb::FieldCodec.ForMessage(10, global::HandDetect.ProtoHand.Parser);
    private readonly pbc::RepeatedField<global::HandDetect.ProtoHand> hands_ = new pbc::RepeatedField<global::HandDetect.ProtoHand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HandDetect.ProtoHand> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::HandDetect.Proto3DControlCommand command_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.Proto3DControlCommand Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hands_.Equals(other.hands_)) return false;
      if (!object.Equals(Command, other.Command)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hands_.GetHashCode();
      if (command_ != null) hash ^= Command.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hands_.WriteTo(output, _repeated_hands_codec);
      if (command_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Command);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hands_.CalculateSize(_repeated_hands_codec);
      if (command_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHandRequest other) {
      if (other == null) {
        return;
      }
      hands_.Add(other.hands_);
      if (other.command_ != null) {
        if (command_ == null) {
          Command = new global::HandDetect.Proto3DControlCommand();
        }
        Command.MergeFrom(other.Command);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 18: {
            if (command_ == null) {
              Command = new global::HandDetect.Proto3DControlCommand();
            }
            input.ReadMessage(Command);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoHandResponse : pb::IMessage<ProtoHandResponse> {
    private static readonly pb::MessageParser<ProtoHandResponse> _parser = new pb::MessageParser<ProtoHandResponse>(() => new ProtoHandResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHandResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandResponse(ProtoHandResponse other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHandResponse Clone() {
      return new ProtoHandResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHandResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHandResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHandResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoHand : pb::IMessage<ProtoHand> {
    private static readonly pb::MessageParser<ProtoHand> _parser = new pb::MessageParser<ProtoHand>(() => new ProtoHand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHand(ProtoHand other) : this() {
      handUid_ = other.handUid_;
      gestureType_ = other.gestureType_;
      handSide_ = other.handSide_;
      wrist_ = other.wrist_ != null ? other.wrist_.Clone() : null;
      thumbCMC_ = other.thumbCMC_ != null ? other.thumbCMC_.Clone() : null;
      thumbMCP_ = other.thumbMCP_ != null ? other.thumbMCP_.Clone() : null;
      thumbDIP_ = other.thumbDIP_ != null ? other.thumbDIP_.Clone() : null;
      thumbTIP_ = other.thumbTIP_ != null ? other.thumbTIP_.Clone() : null;
      indexMCP_ = other.indexMCP_ != null ? other.indexMCP_.Clone() : null;
      indexPIP_ = other.indexPIP_ != null ? other.indexPIP_.Clone() : null;
      indexDIP_ = other.indexDIP_ != null ? other.indexDIP_.Clone() : null;
      indexTIP_ = other.indexTIP_ != null ? other.indexTIP_.Clone() : null;
      middleMCP_ = other.middleMCP_ != null ? other.middleMCP_.Clone() : null;
      middlePIP_ = other.middlePIP_ != null ? other.middlePIP_.Clone() : null;
      middleDIP_ = other.middleDIP_ != null ? other.middleDIP_.Clone() : null;
      middleTIP_ = other.middleTIP_ != null ? other.middleTIP_.Clone() : null;
      ringMCP_ = other.ringMCP_ != null ? other.ringMCP_.Clone() : null;
      ringPIP_ = other.ringPIP_ != null ? other.ringPIP_.Clone() : null;
      ringDIP_ = other.ringDIP_ != null ? other.ringDIP_.Clone() : null;
      ringTIP_ = other.ringTIP_ != null ? other.ringTIP_.Clone() : null;
      pinkyMCP_ = other.pinkyMCP_ != null ? other.pinkyMCP_.Clone() : null;
      pinkyPIP_ = other.pinkyPIP_ != null ? other.pinkyPIP_.Clone() : null;
      pinkyDIP_ = other.pinkyDIP_ != null ? other.pinkyDIP_.Clone() : null;
      pinkyTIP_ = other.pinkyTIP_ != null ? other.pinkyTIP_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHand Clone() {
      return new ProtoHand(this);
    }

    /// <summary>Field number for the "handUid" field.</summary>
    public const int HandUidFieldNumber = 24;
    private int handUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandUid {
      get { return handUid_; }
      set {
        handUid_ = value;
      }
    }

    /// <summary>Field number for the "gestureType" field.</summary>
    public const int GestureTypeFieldNumber = 23;
    private int gestureType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GestureType {
      get { return gestureType_; }
      set {
        gestureType_ = value;
      }
    }

    /// <summary>Field number for the "handSide" field.</summary>
    public const int HandSideFieldNumber = 22;
    private int handSide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandSide {
      get { return handSide_; }
      set {
        handSide_ = value;
      }
    }

    /// <summary>Field number for the "Wrist" field.</summary>
    public const int WristFieldNumber = 21;
    private global::HandDetect.point3 wrist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 Wrist {
      get { return wrist_; }
      set {
        wrist_ = value;
      }
    }

    /// <summary>Field number for the "ThumbCMC" field.</summary>
    public const int ThumbCMCFieldNumber = 1;
    private global::HandDetect.point3 thumbCMC_;
    /// <summary>
    /// 拇指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 ThumbCMC {
      get { return thumbCMC_; }
      set {
        thumbCMC_ = value;
      }
    }

    /// <summary>Field number for the "ThumbMCP" field.</summary>
    public const int ThumbMCPFieldNumber = 2;
    private global::HandDetect.point3 thumbMCP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 ThumbMCP {
      get { return thumbMCP_; }
      set {
        thumbMCP_ = value;
      }
    }

    /// <summary>Field number for the "ThumbDIP" field.</summary>
    public const int ThumbDIPFieldNumber = 3;
    private global::HandDetect.point3 thumbDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 ThumbDIP {
      get { return thumbDIP_; }
      set {
        thumbDIP_ = value;
      }
    }

    /// <summary>Field number for the "ThumbTIP" field.</summary>
    public const int ThumbTIPFieldNumber = 4;
    private global::HandDetect.point3 thumbTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 ThumbTIP {
      get { return thumbTIP_; }
      set {
        thumbTIP_ = value;
      }
    }

    /// <summary>Field number for the "IndexMCP" field.</summary>
    public const int IndexMCPFieldNumber = 5;
    private global::HandDetect.point3 indexMCP_;
    /// <summary>
    /// 食指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 IndexMCP {
      get { return indexMCP_; }
      set {
        indexMCP_ = value;
      }
    }

    /// <summary>Field number for the "IndexPIP" field.</summary>
    public const int IndexPIPFieldNumber = 6;
    private global::HandDetect.point3 indexPIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 IndexPIP {
      get { return indexPIP_; }
      set {
        indexPIP_ = value;
      }
    }

    /// <summary>Field number for the "IndexDIP" field.</summary>
    public const int IndexDIPFieldNumber = 7;
    private global::HandDetect.point3 indexDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 IndexDIP {
      get { return indexDIP_; }
      set {
        indexDIP_ = value;
      }
    }

    /// <summary>Field number for the "IndexTIP" field.</summary>
    public const int IndexTIPFieldNumber = 8;
    private global::HandDetect.point3 indexTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 IndexTIP {
      get { return indexTIP_; }
      set {
        indexTIP_ = value;
      }
    }

    /// <summary>Field number for the "MiddleMCP" field.</summary>
    public const int MiddleMCPFieldNumber = 9;
    private global::HandDetect.point3 middleMCP_;
    /// <summary>
    /// 中指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MiddleMCP {
      get { return middleMCP_; }
      set {
        middleMCP_ = value;
      }
    }

    /// <summary>Field number for the "MiddlePIP" field.</summary>
    public const int MiddlePIPFieldNumber = 10;
    private global::HandDetect.point3 middlePIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MiddlePIP {
      get { return middlePIP_; }
      set {
        middlePIP_ = value;
      }
    }

    /// <summary>Field number for the "MiddleDIP" field.</summary>
    public const int MiddleDIPFieldNumber = 11;
    private global::HandDetect.point3 middleDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MiddleDIP {
      get { return middleDIP_; }
      set {
        middleDIP_ = value;
      }
    }

    /// <summary>Field number for the "MiddleTIP" field.</summary>
    public const int MiddleTIPFieldNumber = 12;
    private global::HandDetect.point3 middleTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 MiddleTIP {
      get { return middleTIP_; }
      set {
        middleTIP_ = value;
      }
    }

    /// <summary>Field number for the "RingMCP" field.</summary>
    public const int RingMCPFieldNumber = 13;
    private global::HandDetect.point3 ringMCP_;
    /// <summary>
    /// 无名指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RingMCP {
      get { return ringMCP_; }
      set {
        ringMCP_ = value;
      }
    }

    /// <summary>Field number for the "RingPIP" field.</summary>
    public const int RingPIPFieldNumber = 14;
    private global::HandDetect.point3 ringPIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RingPIP {
      get { return ringPIP_; }
      set {
        ringPIP_ = value;
      }
    }

    /// <summary>Field number for the "RingDIP" field.</summary>
    public const int RingDIPFieldNumber = 15;
    private global::HandDetect.point3 ringDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RingDIP {
      get { return ringDIP_; }
      set {
        ringDIP_ = value;
      }
    }

    /// <summary>Field number for the "RingTIP" field.</summary>
    public const int RingTIPFieldNumber = 16;
    private global::HandDetect.point3 ringTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 RingTIP {
      get { return ringTIP_; }
      set {
        ringTIP_ = value;
      }
    }

    /// <summary>Field number for the "PinkyMCP" field.</summary>
    public const int PinkyMCPFieldNumber = 17;
    private global::HandDetect.point3 pinkyMCP_;
    /// <summary>
    /// 小拇指
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PinkyMCP {
      get { return pinkyMCP_; }
      set {
        pinkyMCP_ = value;
      }
    }

    /// <summary>Field number for the "PinkyPIP" field.</summary>
    public const int PinkyPIPFieldNumber = 18;
    private global::HandDetect.point3 pinkyPIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PinkyPIP {
      get { return pinkyPIP_; }
      set {
        pinkyPIP_ = value;
      }
    }

    /// <summary>Field number for the "PinkyDIP" field.</summary>
    public const int PinkyDIPFieldNumber = 19;
    private global::HandDetect.point3 pinkyDIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PinkyDIP {
      get { return pinkyDIP_; }
      set {
        pinkyDIP_ = value;
      }
    }

    /// <summary>Field number for the "PinkyTIP" field.</summary>
    public const int PinkyTIPFieldNumber = 20;
    private global::HandDetect.point3 pinkyTIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HandDetect.point3 PinkyTIP {
      get { return pinkyTIP_; }
      set {
        pinkyTIP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandUid != other.HandUid) return false;
      if (GestureType != other.GestureType) return false;
      if (HandSide != other.HandSide) return false;
      if (!object.Equals(Wrist, other.Wrist)) return false;
      if (!object.Equals(ThumbCMC, other.ThumbCMC)) return false;
      if (!object.Equals(ThumbMCP, other.ThumbMCP)) return false;
      if (!object.Equals(ThumbDIP, other.ThumbDIP)) return false;
      if (!object.Equals(ThumbTIP, other.ThumbTIP)) return false;
      if (!object.Equals(IndexMCP, other.IndexMCP)) return false;
      if (!object.Equals(IndexPIP, other.IndexPIP)) return false;
      if (!object.Equals(IndexDIP, other.IndexDIP)) return false;
      if (!object.Equals(IndexTIP, other.IndexTIP)) return false;
      if (!object.Equals(MiddleMCP, other.MiddleMCP)) return false;
      if (!object.Equals(MiddlePIP, other.MiddlePIP)) return false;
      if (!object.Equals(MiddleDIP, other.MiddleDIP)) return false;
      if (!object.Equals(MiddleTIP, other.MiddleTIP)) return false;
      if (!object.Equals(RingMCP, other.RingMCP)) return false;
      if (!object.Equals(RingPIP, other.RingPIP)) return false;
      if (!object.Equals(RingDIP, other.RingDIP)) return false;
      if (!object.Equals(RingTIP, other.RingTIP)) return false;
      if (!object.Equals(PinkyMCP, other.PinkyMCP)) return false;
      if (!object.Equals(PinkyPIP, other.PinkyPIP)) return false;
      if (!object.Equals(PinkyDIP, other.PinkyDIP)) return false;
      if (!object.Equals(PinkyTIP, other.PinkyTIP)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HandUid != 0) hash ^= HandUid.GetHashCode();
      if (GestureType != 0) hash ^= GestureType.GetHashCode();
      if (HandSide != 0) hash ^= HandSide.GetHashCode();
      if (wrist_ != null) hash ^= Wrist.GetHashCode();
      if (thumbCMC_ != null) hash ^= ThumbCMC.GetHashCode();
      if (thumbMCP_ != null) hash ^= ThumbMCP.GetHashCode();
      if (thumbDIP_ != null) hash ^= ThumbDIP.GetHashCode();
      if (thumbTIP_ != null) hash ^= ThumbTIP.GetHashCode();
      if (indexMCP_ != null) hash ^= IndexMCP.GetHashCode();
      if (indexPIP_ != null) hash ^= IndexPIP.GetHashCode();
      if (indexDIP_ != null) hash ^= IndexDIP.GetHashCode();
      if (indexTIP_ != null) hash ^= IndexTIP.GetHashCode();
      if (middleMCP_ != null) hash ^= MiddleMCP.GetHashCode();
      if (middlePIP_ != null) hash ^= MiddlePIP.GetHashCode();
      if (middleDIP_ != null) hash ^= MiddleDIP.GetHashCode();
      if (middleTIP_ != null) hash ^= MiddleTIP.GetHashCode();
      if (ringMCP_ != null) hash ^= RingMCP.GetHashCode();
      if (ringPIP_ != null) hash ^= RingPIP.GetHashCode();
      if (ringDIP_ != null) hash ^= RingDIP.GetHashCode();
      if (ringTIP_ != null) hash ^= RingTIP.GetHashCode();
      if (pinkyMCP_ != null) hash ^= PinkyMCP.GetHashCode();
      if (pinkyPIP_ != null) hash ^= PinkyPIP.GetHashCode();
      if (pinkyDIP_ != null) hash ^= PinkyDIP.GetHashCode();
      if (pinkyTIP_ != null) hash ^= PinkyTIP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (thumbCMC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ThumbCMC);
      }
      if (thumbMCP_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ThumbMCP);
      }
      if (thumbDIP_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ThumbDIP);
      }
      if (thumbTIP_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ThumbTIP);
      }
      if (indexMCP_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(IndexMCP);
      }
      if (indexPIP_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(IndexPIP);
      }
      if (indexDIP_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(IndexDIP);
      }
      if (indexTIP_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IndexTIP);
      }
      if (middleMCP_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MiddleMCP);
      }
      if (middlePIP_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MiddlePIP);
      }
      if (middleDIP_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(MiddleDIP);
      }
      if (middleTIP_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(MiddleTIP);
      }
      if (ringMCP_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RingMCP);
      }
      if (ringPIP_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(RingPIP);
      }
      if (ringDIP_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RingDIP);
      }
      if (ringTIP_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RingTIP);
      }
      if (pinkyMCP_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PinkyMCP);
      }
      if (pinkyPIP_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PinkyPIP);
      }
      if (pinkyDIP_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PinkyDIP);
      }
      if (pinkyTIP_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PinkyTIP);
      }
      if (wrist_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Wrist);
      }
      if (HandSide != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(HandSide);
      }
      if (GestureType != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(GestureType);
      }
      if (HandUid != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(HandUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HandUid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandUid);
      }
      if (GestureType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GestureType);
      }
      if (HandSide != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandSide);
      }
      if (wrist_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Wrist);
      }
      if (thumbCMC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThumbCMC);
      }
      if (thumbMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThumbMCP);
      }
      if (thumbDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThumbDIP);
      }
      if (thumbTIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThumbTIP);
      }
      if (indexMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IndexMCP);
      }
      if (indexPIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IndexPIP);
      }
      if (indexDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IndexDIP);
      }
      if (indexTIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IndexTIP);
      }
      if (middleMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiddleMCP);
      }
      if (middlePIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiddlePIP);
      }
      if (middleDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiddleDIP);
      }
      if (middleTIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiddleTIP);
      }
      if (ringMCP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RingMCP);
      }
      if (ringPIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RingPIP);
      }
      if (ringDIP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RingDIP);
      }
      if (ringTIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RingTIP);
      }
      if (pinkyMCP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PinkyMCP);
      }
      if (pinkyPIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PinkyPIP);
      }
      if (pinkyDIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PinkyDIP);
      }
      if (pinkyTIP_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PinkyTIP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHand other) {
      if (other == null) {
        return;
      }
      if (other.HandUid != 0) {
        HandUid = other.HandUid;
      }
      if (other.GestureType != 0) {
        GestureType = other.GestureType;
      }
      if (other.HandSide != 0) {
        HandSide = other.HandSide;
      }
      if (other.wrist_ != null) {
        if (wrist_ == null) {
          Wrist = new global::HandDetect.point3();
        }
        Wrist.MergeFrom(other.Wrist);
      }
      if (other.thumbCMC_ != null) {
        if (thumbCMC_ == null) {
          ThumbCMC = new global::HandDetect.point3();
        }
        ThumbCMC.MergeFrom(other.ThumbCMC);
      }
      if (other.thumbMCP_ != null) {
        if (thumbMCP_ == null) {
          ThumbMCP = new global::HandDetect.point3();
        }
        ThumbMCP.MergeFrom(other.ThumbMCP);
      }
      if (other.thumbDIP_ != null) {
        if (thumbDIP_ == null) {
          ThumbDIP = new global::HandDetect.point3();
        }
        ThumbDIP.MergeFrom(other.ThumbDIP);
      }
      if (other.thumbTIP_ != null) {
        if (thumbTIP_ == null) {
          ThumbTIP = new global::HandDetect.point3();
        }
        ThumbTIP.MergeFrom(other.ThumbTIP);
      }
      if (other.indexMCP_ != null) {
        if (indexMCP_ == null) {
          IndexMCP = new global::HandDetect.point3();
        }
        IndexMCP.MergeFrom(other.IndexMCP);
      }
      if (other.indexPIP_ != null) {
        if (indexPIP_ == null) {
          IndexPIP = new global::HandDetect.point3();
        }
        IndexPIP.MergeFrom(other.IndexPIP);
      }
      if (other.indexDIP_ != null) {
        if (indexDIP_ == null) {
          IndexDIP = new global::HandDetect.point3();
        }
        IndexDIP.MergeFrom(other.IndexDIP);
      }
      if (other.indexTIP_ != null) {
        if (indexTIP_ == null) {
          IndexTIP = new global::HandDetect.point3();
        }
        IndexTIP.MergeFrom(other.IndexTIP);
      }
      if (other.middleMCP_ != null) {
        if (middleMCP_ == null) {
          MiddleMCP = new global::HandDetect.point3();
        }
        MiddleMCP.MergeFrom(other.MiddleMCP);
      }
      if (other.middlePIP_ != null) {
        if (middlePIP_ == null) {
          MiddlePIP = new global::HandDetect.point3();
        }
        MiddlePIP.MergeFrom(other.MiddlePIP);
      }
      if (other.middleDIP_ != null) {
        if (middleDIP_ == null) {
          MiddleDIP = new global::HandDetect.point3();
        }
        MiddleDIP.MergeFrom(other.MiddleDIP);
      }
      if (other.middleTIP_ != null) {
        if (middleTIP_ == null) {
          MiddleTIP = new global::HandDetect.point3();
        }
        MiddleTIP.MergeFrom(other.MiddleTIP);
      }
      if (other.ringMCP_ != null) {
        if (ringMCP_ == null) {
          RingMCP = new global::HandDetect.point3();
        }
        RingMCP.MergeFrom(other.RingMCP);
      }
      if (other.ringPIP_ != null) {
        if (ringPIP_ == null) {
          RingPIP = new global::HandDetect.point3();
        }
        RingPIP.MergeFrom(other.RingPIP);
      }
      if (other.ringDIP_ != null) {
        if (ringDIP_ == null) {
          RingDIP = new global::HandDetect.point3();
        }
        RingDIP.MergeFrom(other.RingDIP);
      }
      if (other.ringTIP_ != null) {
        if (ringTIP_ == null) {
          RingTIP = new global::HandDetect.point3();
        }
        RingTIP.MergeFrom(other.RingTIP);
      }
      if (other.pinkyMCP_ != null) {
        if (pinkyMCP_ == null) {
          PinkyMCP = new global::HandDetect.point3();
        }
        PinkyMCP.MergeFrom(other.PinkyMCP);
      }
      if (other.pinkyPIP_ != null) {
        if (pinkyPIP_ == null) {
          PinkyPIP = new global::HandDetect.point3();
        }
        PinkyPIP.MergeFrom(other.PinkyPIP);
      }
      if (other.pinkyDIP_ != null) {
        if (pinkyDIP_ == null) {
          PinkyDIP = new global::HandDetect.point3();
        }
        PinkyDIP.MergeFrom(other.PinkyDIP);
      }
      if (other.pinkyTIP_ != null) {
        if (pinkyTIP_ == null) {
          PinkyTIP = new global::HandDetect.point3();
        }
        PinkyTIP.MergeFrom(other.PinkyTIP);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (thumbCMC_ == null) {
              ThumbCMC = new global::HandDetect.point3();
            }
            input.ReadMessage(ThumbCMC);
            break;
          }
          case 18: {
            if (thumbMCP_ == null) {
              ThumbMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(ThumbMCP);
            break;
          }
          case 26: {
            if (thumbDIP_ == null) {
              ThumbDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(ThumbDIP);
            break;
          }
          case 34: {
            if (thumbTIP_ == null) {
              ThumbTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(ThumbTIP);
            break;
          }
          case 42: {
            if (indexMCP_ == null) {
              IndexMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(IndexMCP);
            break;
          }
          case 50: {
            if (indexPIP_ == null) {
              IndexPIP = new global::HandDetect.point3();
            }
            input.ReadMessage(IndexPIP);
            break;
          }
          case 58: {
            if (indexDIP_ == null) {
              IndexDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(IndexDIP);
            break;
          }
          case 66: {
            if (indexTIP_ == null) {
              IndexTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(IndexTIP);
            break;
          }
          case 74: {
            if (middleMCP_ == null) {
              MiddleMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(MiddleMCP);
            break;
          }
          case 82: {
            if (middlePIP_ == null) {
              MiddlePIP = new global::HandDetect.point3();
            }
            input.ReadMessage(MiddlePIP);
            break;
          }
          case 90: {
            if (middleDIP_ == null) {
              MiddleDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(MiddleDIP);
            break;
          }
          case 98: {
            if (middleTIP_ == null) {
              MiddleTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(MiddleTIP);
            break;
          }
          case 106: {
            if (ringMCP_ == null) {
              RingMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(RingMCP);
            break;
          }
          case 114: {
            if (ringPIP_ == null) {
              RingPIP = new global::HandDetect.point3();
            }
            input.ReadMessage(RingPIP);
            break;
          }
          case 122: {
            if (ringDIP_ == null) {
              RingDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(RingDIP);
            break;
          }
          case 130: {
            if (ringTIP_ == null) {
              RingTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(RingTIP);
            break;
          }
          case 138: {
            if (pinkyMCP_ == null) {
              PinkyMCP = new global::HandDetect.point3();
            }
            input.ReadMessage(PinkyMCP);
            break;
          }
          case 146: {
            if (pinkyPIP_ == null) {
              PinkyPIP = new global::HandDetect.point3();
            }
            input.ReadMessage(PinkyPIP);
            break;
          }
          case 154: {
            if (pinkyDIP_ == null) {
              PinkyDIP = new global::HandDetect.point3();
            }
            input.ReadMessage(PinkyDIP);
            break;
          }
          case 162: {
            if (pinkyTIP_ == null) {
              PinkyTIP = new global::HandDetect.point3();
            }
            input.ReadMessage(PinkyTIP);
            break;
          }
          case 170: {
            if (wrist_ == null) {
              Wrist = new global::HandDetect.point3();
            }
            input.ReadMessage(Wrist);
            break;
          }
          case 176: {
            HandSide = input.ReadInt32();
            break;
          }
          case 184: {
            GestureType = input.ReadInt32();
            break;
          }
          case 192: {
            HandUid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Proto3DControlCommand : pb::IMessage<Proto3DControlCommand> {
    private static readonly pb::MessageParser<Proto3DControlCommand> _parser = new pb::MessageParser<Proto3DControlCommand>(() => new Proto3DControlCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Proto3DControlCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HandDetect.HandReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proto3DControlCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proto3DControlCommand(Proto3DControlCommand other) : this() {
      commandId_ = other.commandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proto3DControlCommand Clone() {
      return new Proto3DControlCommand(this);
    }

    /// <summary>Field number for the "commandId" field.</summary>
    public const int CommandIdFieldNumber = 1;
    private int commandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommandId {
      get { return commandId_; }
      set {
        commandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Proto3DControlCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Proto3DControlCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommandId != other.CommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommandId != 0) hash ^= CommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommandId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Proto3DControlCommand other) {
      if (other == null) {
        return;
      }
      if (other.CommandId != 0) {
        CommandId = other.CommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CommandId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
